// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

// Configuration pour votre base de données MySQL
// Le lien de connexion est stocké de manière sécurisée dans le fichier .env.local
datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// Enumerations
enum Role {
  USER
  ADMIN
}

enum CVStatus {
  DRAFT
  GENERATED
  DOWNLOADED
}

// Modèles de données (tables)
model User {
  id            String         @id @default(cuid()) @db.VarChar(255)
  email         String         @unique @db.VarChar(255)
  name          String?        @db.VarChar(255)
  hashedPassword String?       @db.VarChar(255)
  role          Role           @default(USER)
  createdAt     DateTime       @default(now()) @db.DateTime(3)
  updatedAt     DateTime       @updatedAt @db.DateTime(3)
  
  // Relations
  cvs           Cv[]
  analyses      PhotoAnalysis[]
  subscriptions Subscription[]
}

// Le modèle `Cv` est renommé pour respecter la convention de code Next.js
model Cv {
  id             String         @id @default(cuid()) @db.VarChar(255)
  userId         String         @db.VarChar(255)
  user           User           @relation(fields: [userId], references: [id])
  style          String         @db.VarChar(255)
  data           Json?          
  generatedContent String?      @db.LongText
  pdfUrl         String?        @db.VarChar(255)
  status         CVStatus       @default(DRAFT)
  createdAt      DateTime       @default(now()) @db.DateTime(3)
  updatedAt      DateTime       @updatedAt @db.DateTime(3)

  @@index([userId])
}

model PhotoAnalysis {
  id          String         @id @default(cuid()) @db.VarChar(255)
  userId      String         @db.VarChar(255)
  user        User           @relation(fields: [userId], references: [id])
  imageUrl    String         @db.VarChar(255)
  aiReport    Json?          
  createdAt   DateTime       @default(now()) @db.DateTime(3)

  @@index([userId])
}

model Subscription {
  id                     String         @id @default(cuid()) @db.VarChar(255)
  userId                 String         @unique @db.VarChar(255)
  user                   User           @relation(fields: [userId], references: [id])
  stripeCustomerId       String         @unique @db.VarChar(255)
  stripeSubscriptionId   String?        @unique @db.VarChar(255)
  status                 String         @db.VarChar(255)
  plan                   String         @db.VarChar(255)
  currentPeriodEnd       DateTime       @db.DateTime(3)
  createdAt              DateTime       @default(now()) @db.DateTime(3)
  updatedAt              DateTime       @updatedAt @db.DateTime(3)
}